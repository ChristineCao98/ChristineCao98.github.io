<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Dynamic Programming</title>
    <url>/2021/01/22/first-blog/</url>
    <content><![CDATA[<h1 id="Dynamic-Programming"><a href="#Dynamic-Programming" class="headerlink" title="Dynamic Programming"></a>Dynamic Programming</h1><ul>
<li>想满足最优子结，子问题之间必须互相独立</li>
<li>状态转移方程</li>
</ul>
<ol>
<li>明确base case  </li>
<li>明确「状态」</li>
<li>明确「选择」</li>
<li>定义 dp 数组/函数的含义<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 初始化 base case</span><br><span class="line">dp[0][0][...] &#x3D; base</span><br><span class="line"># 进行状态转移</span><br><span class="line">for 状态1 in 状态1的所有取值：</span><br><span class="line">    for 状态2 in 状态2的所有取值：</span><br><span class="line">        for ...</span><br><span class="line">            dp[状态1][状态2][...] &#x3D; 求最值(选择1，选择2...)</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>遍历方向</li>
</ul>
<ol>
<li>遍历的过程中，所需的状态必须是已经计算出来的。</li>
<li>遍历的终点必须是存储结果的那个位置。</li>
</ol>
<h2 id="子序列模板"><a href="#子序列模板" class="headerlink" title="子序列模板"></a>子序列模板</h2><ol>
<li>第一种思路模板是一个一维的 dp 数组：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int n &#x3D; array.length;</span><br><span class="line">int[] dp &#x3D; new int[n];</span><br><span class="line"></span><br><span class="line">for (int i &#x3D; 1; i &lt; n; i++) &#123;</span><br><span class="line">    for (int j &#x3D; 0; j &lt; i; j++) &#123;</span><br><span class="line">        dp[i] &#x3D; 最值(dp[i], dp[j] + ...)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>第二种思路模板是一个二维的 dp 数组：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int n &#x3D; arr.length;</span><br><span class="line">int[][] dp &#x3D; new dp[n][n];</span><br><span class="line"></span><br><span class="line">for (int i &#x3D; 0; i &lt; n; i++) &#123;</span><br><span class="line">    for (int j &#x3D; 1; j &lt; n; j++) &#123;</span><br><span class="line">        if (arr[i] &#x3D;&#x3D; arr[j]) </span><br><span class="line">            dp[i][j] &#x3D; dp[i][j] + ...</span><br><span class="line">        else</span><br><span class="line">            dp[i][j] &#x3D; 最值(...)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
这种思路运用相对更多一些，尤其是涉及两个字符串/数组的子序列。本思路中 dp 数组含义又分为「只涉及一个字符串」和「涉及两个字符串」两种情况。<blockquote>
<ol>
<li>涉及两个字符串/数组时（比如最长公共子序列），dp 数组的含义如下:<br>在子数组arr1[0..i]和子数组arr2[0..j]中，我们要求的子序列（最长公共子序列）长度为dp[i][j]。</li>
<li>只涉及一个字符串/数组时，dp 数组的含义如下:<br>在子数组array[i..j]中，我们要求的子序列的长度为dp[i][j]。<br>主要还是正确定义 dp 数组的含义，遇到子序列问题，首先想到两种动态规划思路，然后根据实际问题看看哪种思路容易找到状态转移关系。<br>另外，找到状态转移和 base case 之后，一定要<strong>观察 DP table，看看怎么遍历</strong>才能保证通过已计算出来的结果解决新的问题</li>
</ol>
</blockquote>
<h2 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h2>贪心算法可以认为是动态规划算法的一个特例，相比动态规划，使用贪心算法需要满足更多的条件（贪心选择性质），但是效率比动态规划要高。<br>贪心选择性质：每一步都做出一个局部最优的选择，最终的结果就是全局最优。</li>
</ol>
<ul>
<li>区间调度算法<blockquote>
<ol>
<li>从区间集合 intvs 中选择一个区间 x，这个 x 是在当前所有区间中结束最早的（end 最小）。</li>
<li>把所有与 x 区间相交的区间从区间集合 intvs 中删除。</li>
<li>重复步骤 1 和 2，直到 intvs 为空为止。之前选出的那些 x 就是最大不相交子集。</li>
</ol>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>problem solving template</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/01/22/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>StringBuffer类</title>
    <url>/2021/01/24/StringBuffer/</url>
    <content><![CDATA[<ul>
<li>The differece between String and StringBuffer<br>String的长度和内容不可变，StringBuffer可变，不会浪费太多资源  <a id="more"></a></li>
<li>Constructor  <ul>
<li>public StringBuffer()</li>
<li>public StringBuffer(int capacity)</li>
<li>public StringBuffer(String str)  </li>
</ul>
</li>
<li>Class Method<br>*<ul>
<li>public int capacity()</li>
<li>public int length() </li>
<li>添加功能<ul>
<li>public StringBuffer append(String str):可以添加任意数据类型，并返回StringBuffer本身</li>
<li>public StringBuffer insert(int offset, String str):在指定位置插入任意数据类型</li>
</ul>
</li>
<li>删除功能 <ul>
<li>public StringBuffer deleteCharAt(int index)</li>
<li>public StringBuffer delete(int start,int end):[start,end)</li>
</ul>
</li>
<li>替换功能  <ul>
<li>public StringBuffer replace(int start,int end,String str)</li>
</ul>
</li>
<li>翻转功能  <ul>
<li>public StringBuffer reverse()</li>
</ul>
</li>
<li>截取功能  <ul>
<li>public String substring(int start)</li>
<li>public String substring(int start,int end)//注意返回值是String</li>
</ul>
</li>
</ul>
</li>
<li>StringBuilder是与StringBuffer兼容的API，但不保证同步(线程不安全)</li>
<li>String是一种特殊的引用类型，只能把它当作基本型来看,可以将其看作常量值，其参数传递和基本类型的参数传递是一样的    </li>
</ul>
<pre><code>public class StringBufferDemo &#123;
public static void main(String[] args) &#123;
String s1 = &quot;hello&quot;;
String s2 = &quot;world&quot;;
System.out.println(s1 + &quot;---&quot; + s2);// hello---world
change(s1, s2);
System.out.println(s1 + &quot;---&quot; + s2);// hello---world


StringBuffer sb1 = new StringBuffer(&quot;hello&quot;);
StringBuffer sb2 = new StringBuffer(&quot;world&quot;);
System.out.println(sb1 + &quot;---&quot; + sb2);// hello---world
change(sb1, sb2);
System.out.println(sb1 + &quot;---&quot; + sb2);// hello---worldworld


&#125;


public static void change(StringBuffer sb1, StringBuffer sb2) &#123;
sb1 = sb2;
sb2.append(sb1);
&#125;


public static void change(String s1, String s2) &#123;
s1 = s2;
s2 = s1 + s2;
&#125;</code></pre>
<p>解释：<br><strong>在java中，对于不管是基本类型还是引用类型，采用的都是值调用</strong></p>
<ul>
<li>call-by-value 值调用：将实际参数的内容拷贝到被调用方法。</li>
<li>call-by-reference 引用调用：将实际参数的地址作为形式参数的值被传递到被调用方法(拷贝到被调用方法的栈中)。<br>因此，对sb1=sb2;这个语句来说，只是将change方法栈内的引用sb1进行重定向，不会影响main方法中sb1引用指向的内容  </li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>basic syntax</tag>
      </tags>
  </entry>
  <entry>
    <title>arrays类&amp;基本包装类型&amp;Random类</title>
    <url>/2021/01/24/arrays/</url>
    <content><![CDATA[<h2 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h2><ul>
<li>概述<br>根据数组进行操作的工具类  </li>
<li>Class Method  <ul>
<li>public static String toString(T&lt;&gt; a)</li>
<li>public static void sort(T&lt;&gt; a)</li>
<li>public static int binarySearch(T&lt;&gt; a,T key)<h2 id="基本包装类型"><a href="#基本包装类型" class="headerlink" title="基本包装类型"></a>基本包装类型</h2>为了对基本数据类型进行更多更方便的操作，Java针对每一种基本数据类型提供了对应的类类型–包装类    <table>
<thead>
<tr>
<th align="center">基本类型</th>
<th align="center">包装类</th>
</tr>
</thead>
<tbody><tr>
<td align="center">byte</td>
<td align="center">Byte</td>
</tr>
<tr>
<td align="center">short</td>
<td align="center">Short</td>
</tr>
<tr>
<td align="center">int</td>
<td align="center">Integer</td>
</tr>
<tr>
<td align="center">long</td>
<td align="center">Long</td>
</tr>
<tr>
<td align="center">float</td>
<td align="center">Float</td>
</tr>
<tr>
<td align="center">double</td>
<td align="center">Double</td>
</tr>
<tr>
<td align="center">char</td>
<td align="center">Character</td>
</tr>
<tr>
<td align="center">boolean</td>
<td align="center">Boolean</td>
</tr>
</tbody></table>
<a id="more"></a>
<h3 id="Integer类"><a href="#Integer类" class="headerlink" title="Integer类"></a>Integer类</h3></li>
</ul>
</li>
<li>构造方法  <ul>
<li>public Integer(int i)</li>
<li>public Integer(String str)//str必须由数字字符串组成  </li>
</ul>
</li>
<li>Class Method  <ul>
<li>Conversion between int and String<ul>
<li>public static String toString(int num)//int -&gt; String</li>
<li>public static int parseInt(String str)//String -&gt; int</li>
</ul>
</li>
<li>public int intValue()//Integer -&gt; int</li>
<li>public static Integer valueOf(int num)//int -&gt; Integer</li>
<li>public static Integer valueOf(String str)//String -&gt; Integer</li>
<li>十进制到其他进制  <ul>
<li>public static String toString(int i,int radix)//radix为进制数，进制的范围是2-36</li>
</ul>
</li>
<li>其他进制到十进制  <ul>
<li>public static int parseInt(String str,int radix)</li>
</ul>
</li>
</ul>
</li>
<li>JDK新特性  <ul>
<li>自动装箱<br>把基本类型转换为包装类型  </li>
<li>自动拆箱<br>把包装类型转换为基本类型<h3 id="Character类"><a href="#Character类" class="headerlink" title="Character类"></a>Character类</h3></li>
</ul>
</li>
<li>Constructor<br>public Character(char value)</li>
<li>Class Method<ul>
<li>public static boolean isUpperCase(char ch)</li>
<li>public static boolean isLowerCase(char ch)</li>
<li>public static boolean isDigit(char ch)</li>
<li>public static char toUpperCase(char ch)</li>
<li>public static char toLowerCase(char ch)<h2 id="Random类"><a href="#Random类" class="headerlink" title="Random类"></a>Random类</h2></li>
</ul>
</li>
<li>Constructor<ul>
<li>public Random()//用当前时间的毫秒值作为默认种子</li>
<li>public Random(long seed)//给定种子后，每次得到的随机数是相同的 </li>
</ul>
</li>
<li>Class Method<ul>
<li>public int nextInt()//在int的范围内生成随机数</li>
<li>public int nextInt(int n)//[0,n)范围内生成随机数</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>basic syntax</tag>
      </tags>
  </entry>
  <entry>
    <title>Common Class</title>
    <url>/2021/01/24/commonclass/</url>
    <content><![CDATA[<h3 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h3><ul>
<li><p>概述<br>包含一些有用的类字段和方法，不能被实例化</p>
</li>
<li><p>Class Method  </p>
<ul>
<li>public static void gc()<br>System.gc()可用于垃圾回收，当使用它回收某个对象占用的内存之前，通过要求程序调用适当的方法清理资源。在没有明确指定资源清理的情况下，Java提供了默认机制来清理该对象的资源，就是调用Object类的finalize()方法()。finalize()方法的作用是释放一个对象占用的内存空间时，会被JVM调用，而子类重写该方法，就可以清理对象占用的资源，通过super.finalize()的方式可以实现从下到上的finalize()方法的调用，即先释放自己的资源再去释放父类的资源。<br>但是不要在程序中频繁地调用垃圾回收，因为每一次执行垃圾回收，JVM都会强制启动垃圾回收器运行，这会耗费更多的系统资源，会与正常的java程序运行争抢资源。只有在执行大量的对象释放时才调用垃圾回收最好。</li>
<li>public static void exit(int status)<br>终止目前正在运行的JVM，参数用作状态码。根据惯例，非0的状态码表示异常终止  </li>
<li>public static long currentTimeMillis()//返回当前时间与协调世界时，1970年1月1日午夜之间的时间差(以毫秒为单位)  </li>
<li>public static void arraycopy(Object src,int srcPos,Object dest,int desPos,int length)//从指定源数组中复制一个数组，复制从指定的位置开始，到目标数组的指定位置结束(注意此方法名是不规范的)  <a id="more"></a>

</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int[] arr1&#x3D;&#123;1,2,3,4,5&#125;</span><br><span class="line">int[] arr2&#x3D;&#123;11,22,33,44,55&#125;</span><br><span class="line">System.arraycopy(arr1,1,arr2,2,2);&#x2F;&#x2F;arr2:&#123;11,22,2,3,55&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Date类-很多功能都被Calender替代了"><a href="#Date类-很多功能都被Calender替代了" class="headerlink" title="Date类(很多功能都被Calender替代了)"></a>Date类(很多功能都被Calender替代了)</h3></li>
<li><p>精确到毫秒</p>
</li>
<li><p>constructor </p>
<ul>
<li>public Date()//用当前毫秒值构造</li>
<li>public Date(long date)//用给定毫秒值构造</li>
</ul>
</li>
<li><p>class method</p>
<ul>
<li>public long getTime()//获取时间，以毫秒为单位  </li>
<li>public void setTime(long time)//设置时间  </li>
</ul>
</li>
</ul>
<h3 id="Calender类"><a href="#Calender类" class="headerlink" title="Calender类"></a>Calender类</h3><ul>
<li>public int get(int field)//返回给定日历字段的值，日历类中的每个日历字段都是静态的成员变量，并且是int类型</li>
<li>public static Calender getInstance()//注意这个getInstance()会创建一个子类对象  </li>
<li>public void add(int field,int amount)//在给定的字段中加上amount值  </li>
<li>public final void set(int year,int month,int day)//注意Calender的month是从0开始算的</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>basic syntax</tag>
      </tags>
  </entry>
</search>
